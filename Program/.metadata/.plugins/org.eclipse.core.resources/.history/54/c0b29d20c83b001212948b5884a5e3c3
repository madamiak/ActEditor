package pl.wroc.pwr.student.acteditor.parsing.xsd;

import java.util.Stack;

import pl.wroc.pwr.student.acteditor.model.AttributeRegistry;
import pl.wroc.pwr.student.acteditor.model.ElementRegistry;
import pl.wroc.pwr.student.acteditor.model.tags.Attribute;
import pl.wroc.pwr.student.acteditor.model.tags.AttributeGroup;
import pl.wroc.pwr.student.acteditor.model.tags.Composition;
import pl.wroc.pwr.student.acteditor.model.tags.Element;
import pl.wroc.pwr.student.acteditor.model.tags.SimpleAttribute;
import pl.wroc.pwr.student.acteditor.parsing.Parser;

/**
 * Zapewnia parsowanie danych wczytanych z dokumentu XML.
 * 
 * Wczytuje dane z dokumentu XML i zapisuje je w odpowiednich rejestrach.
 * 
 * @author Mateusz
 * 
 */
public class XSDParser implements Parser {
	private XSDHelper helper;
	private String[] lines;
	private ElementRegistry registry;
	private AttributeRegistry aRegistry;

	public XSDParser(String[] lines) {
		this.lines = lines;
		this.helper = new XSDHelper();
		registry = ElementRegistry.getRegistry();
		aRegistry = AttributeRegistry.getRegistry();
		loadAttributesToRegistry();
	}

	private String getAttribute(String name, String line) {
		if (line.contains(name)) {
			int begin = line.indexOf(name + "=\"") + (name + "=\"").length();
			int end = line.indexOf("\"", line.indexOf(name + "=\"") + (name + "=\"").length());
			return line.substring(begin, end);
		}
		return null;
	}

	private Attribute createAttributeDefinition(String line) {
		Attribute result = new SimpleAttribute();
		String name = getAttribute("name", line);
		String type = getAttribute("type", line);
		String use = getAttribute("use", line);
		result.setName(name);
		result.setType(type);
		result.setUse(use);
		return result;
	}

	private Attribute createSimpleTypeDefinition(String line) {
		Attribute result = new SimpleAttribute();
		String name = getAttribute("name", line);
		result.setName(name);
		return result;
	}

	private Attribute createAttributeGroupDefinition(String line) {
		String name = getAttribute("name", line);
		Attribute result = new AttributeGroup();
		result.setName(name);
		return result;
	}

	private int getAClosedToken(String line) {
		if (closedAttributeGroupDefinition(line)) {
			return 0;
		} else if (closedSimpleType(line)) {
			return 8;
		} else if (closedRestriction(line)) {
			return 2;
		} else if (closedAttributeDefinition(line)) {
			return 3;
		} else if (closedSimpleAttribute(line)) {
			return 4;
		}
		return -1;
	}

	private boolean closedSimpleAttribute(String line) {
		return (line.contains("attribute") && !line.contains("attributeGroup") && line.contains("/>")) ? true : false;
	}

	private boolean closedAttributeGroupDefinition(String line) {
		return line.contains("</xsd:attributeGroup>") ? true : false;
	}

	private boolean closedSimpleType(String line) {
		return line.contains("</xsd:simpleType>") ? true : false;
	}

	private boolean closedRestriction(String line) {
		return line.contains("</xsd:restriction>") ? true : false;
	}

	private boolean closedAttributeDefinition(String line) {
		return (line.contains("</xsd:attribute>")) ? true : false;
	}

	private int getAToken(String line) {
		if (hasAttributeGroupDefinition(line)) {
			return 0;
		} else if (hasRestriction(line)) {
			return 1;
		} else if (hasAttributeDefinition(line)) {
			return 2;
		}
		return -1;
	}

	private boolean hasSimpleTypeDefinition(String line) {
		return (line.contains("simpleType") && line.contains("name=")) ? true : false;
	}

	private boolean hasAttributeDefinition(String line) {
		return (line.contains("attribute") && !line.contains("attributeGroup") && line.contains("name=")) ? true : false;
	}

	private boolean hasRestriction(String line) {
		return (line.contains("restriction") && line.contains("base=")) ? true : false;
	}

	private boolean hasAttributeGroupDefinition(String line) {
		return (line.contains("attributeGroup") && line.contains("name=")) ? true : false;
	}

	public void loadAttributesToRegistry() {
		int token = -1;
		Stack attributes = new Stack();
		Attribute attribute = null;
		Attribute parent = null;

		for (String line : lines) {
			token = getAToken(line);
			if (token != -1) {
				System.out.println(token + line);
				System.out.println(attributes);
			}
			switch (token) {
			case 0:
				attribute = createAttributeGroupDefinition(line);
				attributes.push(attribute);
				break;
			case 2:
				attribute = createAttributeDefinition(line);
				if (attributes.isEmpty()) {
					attributes.push(attribute);
				} else {
					parent = (Attribute) attributes.pop();
					parent.add(attribute);
					attributes.push(parent);
					attributes.push(attribute);
				}
				break;
			case 3:
				attribute = createSimpleTypeDefinition(line);
				attributes.push(attribute);
				break;
			}

			if (token != -1) {
				System.out.println(attributes);
			}
			token = getAClosedToken(line);
			if (token != -1) {
				System.out.println(token + line);
				System.out.println(attributes);
			}
			switch (token) {
			case 0:
				attribute = (Attribute) attributes.pop();
				aRegistry.add(attribute);
				break;
			case 1:
				attribute = (Attribute) attributes.pop();
				aRegistry.add(attribute);
				break;
			case 3:
				attribute = (Attribute) attributes.pop();
				if (attributes.isEmpty()) {
					aRegistry.add(attribute);
				}
				break;
			case 4:
				attribute = (Attribute) attributes.pop();
				aRegistry.add(attribute);
				break;
			}

			if (token != -1) {
				System.out.println(attributes);
			}
		}
		System.out.println(aRegistry.getAttributes());
	}

	@Override
	public void loadData() {
		int token = -1;
		boolean desc = false;
		Stack elements = new Stack();
		Element element = null;
		Element sequence = null;
		Element choice = null;
		Element group = null;
		Element parent = null;

		sequence = new Composition("rozwiñ", "seq");
		String seqDsc = "Wszystkie tagi do wype³nienia";
		sequence.setDescription(seqDsc);
		registry.add(sequence);

		choice = new Composition("rozwiñ", "choice");
		String choiceDsc = "Wybrany tag do wype³nienia";
		choice.setDescription(choiceDsc);
		registry.add(choice);

		for (String line : lines) {
			token = helper.getToken(line);

			switch (token) {
			case 0:
				element = helper.createComposition(line, "all");
				elements.push(element);
				break;
			case 1:
				Element subElement = helper.createReference(line);
				parent = (Element) elements.pop();
				parent.add(subElement);
				elements.push(parent);
			case 3:
				if (!desc) {
					String description = helper.getDescription(line);
					parent = (Element) elements.pop();
					parent.setDescription(description);
					elements.push(parent);
					desc = true;
				}
				break;
			case 5:
				sequence = new Composition("rozwiñ", "seq");
				elements.push(sequence);
				break;
			case 6:
				group = helper.createGroupDefinition(line, "group");
				elements.push(group);
				break;
			case 7:
				group = helper.createGroupReference(line, "group");
				parent = (Element) elements.pop();
				parent.add(group);
				elements.push(parent);
				break;
			case 8:
				choice = new Composition("rozwiñ", "choice");
				elements.push(choice);
				break;
			case 9:
				Attribute a = aRegistry.get(getAttribute("ref", line));
				System.out.println();
				break;
			}
			token = helper.checkIfClosed(line);
			switch (token) {
			case 8:
				registry.add(element);
				desc = false;
				break;
			case 13:
				sequence = (Element) elements.pop();
				parent = (Element) elements.pop();
				parent.add(sequence);
				elements.push(parent);
				break;
			case 14:
				group = (Element) elements.pop();
				registry.add(group);
				break;
			case 15:
				choice = (Element) elements.pop();
				parent = (Element) elements.pop();
				parent.add(choice);
				elements.push(parent);
				break;
			}
		}
		return;
	}
}
