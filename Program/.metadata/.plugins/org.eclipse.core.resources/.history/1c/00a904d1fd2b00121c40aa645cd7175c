package pl.wroc.pwr.student.acteditor.view;

import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;

import pl.wroc.pwr.student.acteditor.model.Schema;
import pl.wroc.pwr.student.acteditor.parsing.xsd.Element;
import pl.wroc.pwr.student.acteditor.parsing.xsd.XSDParser;

public class DecisionWindow extends Window {
	
	public DecisionWindow(Display display) {
		this.display = display;
	}

	/**
	 * @wbp.parser.entryPoint
	 */
	@Override
	protected void initialize() {
		shell = new Shell(display);
//		Display display = new Display();
//		Shell shell = new Shell(display);
		shell.setSize(793, 657);
		shell.setText("Decision");
		shell.setMaximized(true);
		shell.setLayout(new FormLayout());
		
		Group group = new Group(shell, SWT.NONE);
		FormData fd_group = new FormData();
		fd_group.top = new FormAttachment(0, 10);
		fd_group.right = new FormAttachment(100, -255);
		group.setLayoutData(fd_group);
		
		final XSDParser parser = new XSDParser(Schema.getSchemaContent());
		Element decision = parser.getElement("decyzja");
		
		final Tree tree = new Tree(shell, SWT.BORDER);
		
		for(Element e1 : decision.getElements()) {
			TreeItem ti1 = new TreeItem(tree, SWT.NONE);
			ti1.setText(e1.getName());
			if(e1.getElements() == null) {
				continue;
			}
			for(Element e2 : e1.getElements()) {
				TreeItem ti2 = new TreeItem(ti1, SWT.NONE);
				ti2.setText(e2.getName());
				if(e2.getElements() == null) {
					continue;
				}
				for(Element e3 : e2.getElements()) {
					TreeItem ti3 = new TreeItem(ti2, SWT.NONE);
					ti3.setText(e2.getName());
				}
			}
		}
//		tree.addListener(SWT.MouseDown, new Listener() {
//      public void handleEvent(Event event) {
//        Point point = new Point(event.x, event.y);
//        TreeItem item = tree.getItem(point);
//        if (item != null) {
//        	Element e = parser.getElement(item.getText());
//        	for(Element p : e.getElements()) {
//        		TreeItem ti = new TreeItem(tree.getItem(tree.indexOf(item)), SWT.NONE);
//        		ti.setText(p.getName());
//        	}
//        }
//      }
//        	
//        }
//      	Point point = new Point(event.x, event.y);
//      	fillTree(point);
//      }
//
//			private void fillTree(Point point) {
//				TreeItem item = 
//			}
//    });
		
		for(Element f : decision.getElements()) {
			System.out.println(f);
			TreeItem ti = new TreeItem(tree, SWT.NONE);
			ti.setText(f.getName());
		}
		
		FormData fd_tree = new FormData();
		fd_tree.bottom = new FormAttachment(0, 443);
		fd_tree.right = new FormAttachment(0, 276);
		fd_tree.top = new FormAttachment(0, 10);
		fd_tree.left = new FormAttachment(0, 10);
		tree.setLayoutData(fd_tree);
	}

	@Override
	protected void open() {
		shell.open();
	}

	@Override
	protected void dispose() {
	}
}
