package pl.wroc.pwr.student.acteditor.parsing.xsd;

import java.util.ArrayList;
import java.util.List;

import pl.wroc.pwr.student.acteditor.model.ElementRegistry;

public class XSDHelper {
	String[] xsdLines;
	ElementRegistry registry;
	
	public XSDHelper(String[] xsdLines) {
		this.xsdLines = xsdLines;
		this.registry = ElementRegistry.getRegistry();
		function();
	}
	
	public List<String> getLinesWithElement(String elementName) {
		boolean read = false;
		String tag = "";
		List<String> result = new ArrayList<String>();

		for (int i = 0; i < xsdLines.length; i++) {
			String currentLine = getWithoutInitialSpaces(xsdLines[i]);

			if (hasElementInLine(elementName, currentLine)) {
				read = true;
				tag = getTagName(currentLine);

				System.out.println(currentLine);
				result.add(currentLine);

				continue;
			}

			if (read == true) {
				String endingTag = getEndingTag(tag);

				if (currentLine.equals(endingTag)) {
					read = false;
				}

				System.out.println(currentLine);
				result.add(currentLine);
			}
		}
		return result;
	}
	
	public String getLineWithDescription(String eachLine) {
		if (eachLine.contains("xsd:documentation>")) {
			return eachLine.substring(eachLine.indexOf("<xsd:documentation>"), eachLine.indexOf("</xsd:documentation>"));
		}
		return null;
	}

	private String getWithoutInitialSpaces(String text) {
		return text.substring(text.indexOf("<"));
	}

	public boolean hasElementInLine(String elementName, String line) {
		return line.contains("element name=\"" + elementName);
	}

	private String getTagName(String line) {
		return line.split(" ")[0];
	}

	private String getEndingTag(String tag) {
		return tag.replaceAll("<", "</") + ">";
	}

	private void function() {
		boolean flag = false;
		Element element = null;
		for(String s : xsdLines) {
			if(!flag && s.contains("element") && s.contains("name=")) {
				String name = s.substring(s.indexOf("name=\"") + "name=\"".length(), s.indexOf("\"", s.indexOf("name=\"") + "name=\"".length()));
				Element e = new Composition(name, "all");
//				registry.add(e);
				flag = true;
				element = e;
				continue;
			}
			
			if(flag) {
				if(s.contains("</xsd:element>")) {
					flag = false;
					registry.add(element);
					System.out.println(element);
					continue;
				} else if (s.contains("element") && !s.contains("name")) {
					String name = s.substring(s.indexOf("ref=\"") + "ref=\"".length(), s.indexOf("\"", s.indexOf("ref=\"") + "ref=\"".length()));
					element.add(new SimpleElement(name));
				}
				
				if(s.contains("documentation")) {
					element.setDescription("\t" + s.substring(s.indexOf(">") + 1, s.lastIndexOf("<")));
					continue;
				}
			}
		}
	}

	public Element getElementByName(String elementName) {
		return registry.get(elementName);
	}
}
