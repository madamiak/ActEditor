package pl.wroc.pwr.student.acteditor.parsing.xsd;

import java.util.Stack;

import pl.wroc.pwr.student.acteditor.model.AttributeRegistry;
import pl.wroc.pwr.student.acteditor.model.ElementRegistry;
import pl.wroc.pwr.student.acteditor.model.TypeRegistry;
import pl.wroc.pwr.student.acteditor.model.tags.Attribute;
import pl.wroc.pwr.student.acteditor.model.tags.AttributeGroup;
import pl.wroc.pwr.student.acteditor.model.tags.Composition;
import pl.wroc.pwr.student.acteditor.model.tags.Element;
import pl.wroc.pwr.student.acteditor.model.tags.SimpleAttribute;
import pl.wroc.pwr.student.acteditor.model.tags.SimpleElement;
import pl.wroc.pwr.student.acteditor.model.tags.SimpleType;

/**
 * Klasa pomocnicza do wczytywania dokumentu XML.
 * 
 * @author Mateusz
 *
 */
public class XSDHelper {
	private Stack stack;
	private ElementRegistry elements;
	private AttributeRegistry attributes;
	private TypeRegistry types;
	
	public XSDHelper() {
		stack = new Stack();
		elements = ElementRegistry.getRegistry();
		attributes = AttributeRegistry.getRegistry();
		types = TypeRegistry.getRegistry();
	}
	
	private void patternEventHandle(String line) {
		SimpleType simpleType = (SimpleType) stack.pop();
		String pattern = getAttribute("value", line);
		simpleType.setPattern(pattern);
		stack.push(simpleType);
	}

	private void enumerationEventHandle(String line) {
		SimpleType simpleType = (SimpleType) stack.pop();
		String enumeration = getAttribute("value", line);
		simpleType.add(enumeration);
		stack.push(simpleType);
	}

	private void simpleTypeBeginningEventHandle(String line) {
		SimpleType simpleType = new SimpleType();
		stack.push(simpleType);
	}

	private void closingSimpleTypeEventHandle(String line) {
		SimpleType simpleType = (SimpleType) stack.pop();
		if(!stack.isEmpty()) {
			Object parent = stack.pop();
			if(parent instanceof Attribute) {
				((Attribute)parent).setSimpleType(simpleType);
				stack.push(parent);
			}
		} else {
			types.add(simpleType);
		}
	}

	private void simpleTypeDefinitionEventHandle(String line) {
		SimpleType simpleType = createSimpleTypeDefinition(line);
		stack.push(simpleType);
	}

	private SimpleType createSimpleTypeDefinition(String line) {
		SimpleType simpleType = new SimpleType();
		String name = getAttribute("name", line);
		simpleType.setName(name);
		return simpleType;
	}

	private void closingAttributeGroupEventHandle(String line) {
		Attribute attribute = (Attribute) stack.pop();
		attributes.add(attribute);
	}

	private void attributeGroupReferenceEventHandle(String line) {
		Attribute attribute = createGroupReference(line);
		Object parent = stack.pop();
		if(parent instanceof Element) {
			((Element)parent).addAttribute(attribute);
		} else if(parent instanceof Attribute) {
			((Attribute)parent).add(attribute);
		}
		stack.push(parent);
	}

	private Attribute createGroupReference(String line) {
		Attribute attribute = new AttributeGroup();
		String name = getAttribute("ref", line);
		attribute.setName(name);
		return attribute;
	}

	private void attributeGroupDefinitionEventHandle(String line) {
		Attribute attribute = createGroupDefinition(line);
		stack.push(attribute);
	}

	private Attribute createGroupDefinition(String line) {
		Attribute attribute = new AttributeGroup();
		String name = getAttribute("name", line);
		attribute.setName(name);
		return attribute;
	}

	private void closingAttributeDefinitionEventHandle(String line) {
		Attribute attribute = (Attribute) stack.pop();
		Object parent = stack.pop();
		if(parent instanceof Element) {
			((Element)parent).addAttribute(attribute);
		} else if(parent instanceof Attribute) {
			((Attribute)parent).add(attribute);
		}
		stack.push(parent);
	}

	private void oneLineAttributeDefinitionEventHandle(String line) {
		Attribute attribute = createAttribute(line);
		Object parent = stack.pop();
		if(parent instanceof Element) {
			((Element)parent).addAttribute(attribute);
		} else if(parent instanceof Attribute) {
			((Attribute)parent).add(attribute);
		}
		stack.push(parent);
	}

	private void attributeDefinitionEventHandle(String line) {
		Attribute attribute = createAttribute(line);
		stack.push(attribute);
	}

	private Attribute createAttribute(String line) {
		String name = getAttribute("name", line);
		String defaultValue = getAttribute("default", line);
		String type = getAttribute("type", line);
		String use = getAttribute("use", line);
		Attribute attribute = new SimpleAttribute();
		attribute.setName(name);
		attribute.setType(type);
		if(!defaultValue.equals("")) {
			attribute.setDefault(defaultValue);
		}
		if(!use.equals("")) {
			attribute.setUse(use);
		}
		return attribute;
	}

	private void closingComplexTypeDefinitionEventHandler(String line) {
		Element element = (Element) stack.pop();
		elements.add(element);
	}

	private void complexTypeDefinitionEventHandle(String line) {
		String name = getAttribute("name", line);
		Element element = new Composition(name, "complex");
		stack.push(element);
	}

	private void closingElementGroupDefinitionEventHandle(String line) {
		Element element = (Element) stack.pop();
		elements.add(element);
	}

	private void elementGroupReferenceEventHandle(String line) {
		Element element = createElementGroupReference(line);
		String minOccurs = getAttribute("minOccurs", line);
		String maxOccurs = getAttribute("maxOccurs", line);
		if(!minOccurs.equals("")) {
			element.setMinOccurs(minOccurs);
		}
		if(!maxOccurs.equals("")) {
			element.setMaxOccurs(maxOccurs);
		}
		Element parent = (Element) stack.pop();
		parent.add(element);
		stack.push(parent);
	}

	private Element createElementGroupReference(String line) {
		String name = getAttribute("ref", line);
		Element element = new Composition(name, "ref");
		return element;
	}

	private void elementGroupDefinitionEventHandle(String line) {
		Element element = createElementGroupDefinition(line);
		stack.push(element);
	}

	private Element createElementGroupDefinition(String line) {
		String name = getAttribute("name", line);
		Element element = new Composition(name, "group");
		return element;
	}

	private void closingChoiceEventHandle(String line) {
		Element element = (Element) stack.pop();
		if(!stack.isEmpty()) {
			Element parent = (Element) stack.pop();
			parent.add(element);
			stack.push(parent);
		}
	}

	private void choiceEventHandle(String line) {
		Element element = new Composition("rozwiñ", "choice");
		String minOccurs = getAttribute("minOccurs", line);
		String maxOccurs = getAttribute("maxOccurs", line);
		if(!minOccurs.equals("")) {
			element.setMinOccurs(minOccurs);
		}
		if(!maxOccurs.equals("")) {
			element.setMaxOccurs(maxOccurs);
		}
		stack.push(element);		
	}

	private void closingSequenceEventHandle(String line) {
		Element element = (Element) stack.pop();
		Element parent = (Element) stack.pop();
		parent.add(element);
		stack.push(parent);
	}

	private void sequenceEventHandle(String line) {
		Element element = new Composition("rozwiñ", "seq");
		String minOccurs = getAttribute("minOccurs", line);
		String maxOccurs = getAttribute("maxOccurs", line);
		if(!minOccurs.equals("")) {
			element.setMinOccurs(minOccurs);
		}
		if(!maxOccurs.equals("")) {
			element.setMaxOccurs(maxOccurs);
		}
		stack.push(element);
	}

	private void oneLineElementDefinitionEventHandle(String line) {
		Element element = createElementDefinition(line);
		elements.add(element);
	}

	private void elementReferenceEventHandle(String line) {
		Element element = createElementReference(line);
		stack.push(element);
	}

	private void oneLineElementReferenceEventHandle(String line) {
		Element element = createElementReference(line);
		Element parent = null;
		if(!stack.isEmpty()) {
			parent = (Element) stack.pop();
			parent.add(element);
			stack.push(parent);
		}
	}

	private Element createElementReference(String line) {
		String name = getAttribute("ref", line);
		String minOccurs = getAttribute("minOccurs", line);
		String maxOccurs = getAttribute("maxOccurs", line);
		Element element = new Composition(name, "ref");
		if(!minOccurs.equals("")) {
			element.setMinOccurs(minOccurs);
		}
		if(!maxOccurs.equals("")) {
			element.setMaxOccurs(maxOccurs);
		}
		return element;
	}

	private void closingElementEventHandle(String line) {
		Element element = (Element) stack.pop();
		if(element.getType().equals("ref")) {
			Element parent = (Element) stack.pop();
			parent.add(element);
			stack.push(parent);
		} else {
			elements.add(element);
		}
	}

	private void documentationEventHandle(String line) {
		Object parent = null;
		if(!stack.isEmpty()) {
			parent = stack.pop();
		}
		if(parent instanceof Composition || parent instanceof SimpleElement) {
			Element element = (Element) parent;
			element = (Element) setDescription(element, line);
			stack.push(element);
		}	else if(parent instanceof Attribute || parent instanceof AttributeGroup) {
			Attribute attribute = (Attribute) parent;
			attribute = (Attribute) setDescription(attribute, line);
			stack.push(attribute);
		} else if(parent instanceof SimpleType) {
			SimpleType simpleType = (SimpleType) parent;
			simpleType = (SimpleType) setDescription(simpleType, line);
			stack.push(simpleType);
 		}
	}

	private Object setDescription(Object object, String line) {
		String description = line.substring(line.indexOf(">")+1, line.lastIndexOf("<"));
		if(object instanceof Composition || object instanceof SimpleElement) {
			if(((Element)object).getDescription().length() == 0) {
				((Element)object).setDescription(description);
			}
		} else if(object instanceof Attribute || object instanceof AttributeGroup) {
			if(((Attribute)object).getDescription().length() == 0) {
				((Attribute)object).setDescription(description);
			}
		} else if(object instanceof SimpleType) {
			if(((SimpleType)object).getDescription().length() == 0) {
				((SimpleType)object).setDescription(description);
			}
		}
		return object;
	}

	private void elementDefinitionEventHandle(String line) {
		Element element = createElementDefinition(line);
		stack.push(element);
	}

	private Element createElementDefinition(String line) {
		String name = getAttribute("name", line);
		Element result = new Composition(name, "all");
		return result;
	}

	private String getAttribute(String name, String line) {
		if(line.contains(name)) {
			int begin = line.indexOf(name + "=\"") + (name + "=\"").length();
			int end = line.indexOf("\"", line.indexOf(name + "=\"") + (name + "=\"").length());
			return line.substring(begin, end);
		}
		return "";
	}
}
